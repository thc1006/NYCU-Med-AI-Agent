{"ast":null,"code":"/**\r\n * API 服務層 - 與後端 FastAPI 通訊\r\n */\n\nimport axios from 'axios';\nimport { API_ENDPOINTS } from '../types';\nimport { API_CONFIG } from '../config/api';\n\n// 建立 axios 實例\nconst api = axios.create({\n  baseURL: API_CONFIG.BASE_URL,\n  timeout: API_CONFIG.TIMEOUT,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Accept-Language': 'zh-TW'\n  }\n});\n\n// 請求攔截器 - 加入請求 ID 和時間戳\napi.interceptors.request.use(config => {\n  var _config$method;\n  const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  config.headers['X-Request-ID'] = requestId;\n  config.headers['X-Client-Timestamp'] = new Date().toISOString();\n  console.log(`[API Request] ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, {\n    requestId,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('[API Request Error]', error);\n  return Promise.reject(error);\n});\n\n// 回應攔截器 - 統一錯誤處理\napi.interceptors.response.use(response => {\n  console.log(`[API Response] ${response.status}`, {\n    requestId: response.headers['x-request-id'],\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response2$data, _error$config;\n  console.error('[API Response Error]', {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url\n  });\n\n  // 轉換錯誤訊息為繁體中文\n  const errorMessage = getErrorMessage(error);\n  error.message = errorMessage;\n  return Promise.reject(error);\n});\n\n/**\r\n * 將錯誤訊息轉換為使用者友善的繁體中文訊息\r\n */\nfunction getErrorMessage(error) {\n  var _error$response3, _error$response3$data, _error$response4;\n  if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.message) {\n    return error.response.data.message;\n  }\n  switch ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) {\n    case 400:\n      return '請求參數有誤，請檢查輸入資料';\n    case 401:\n      return '未授權存取，請重新登入';\n    case 403:\n      return '沒有權限執行此操作';\n    case 404:\n      return '找不到相關資源';\n    case 429:\n      return '請求過於頻繁，請稍後再試';\n    case 500:\n      return '伺服器發生錯誤，請稍後再試';\n    case 502:\n    case 503:\n    case 504:\n      return '服務暫時無法使用，請稍後再試';\n    default:\n      if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n        return '網路連線異常，請檢查網路設定';\n      }\n      if (error.code === 'ECONNABORTED') {\n        return '請求超時，請重試';\n      }\n      return '系統發生未知錯誤，請聯絡技術支援';\n  }\n}\n\n/**\r\n * 症狀分級評估 API\r\n */\nexport const triageApi = {\n  /**\r\n   * 快速症狀評估\r\n   */\n  async quickTriage(request) {\n    try {\n      const response = await api.post(API_ENDPOINTS.TRIAGE_QUICK, request);\n      return response.data;\n    } catch (error) {\n      console.error('[Triage API Error]', error);\n      throw error;\n    }\n  }\n};\n\n/**\r\n * 醫院搜尋 API\r\n */\nexport const hospitalApi = {\n  /**\r\n   * 搜尋附近醫院\r\n   */\n  async searchNearby(params) {\n    try {\n      var _params$departments;\n      const response = await api.get(API_ENDPOINTS.HOSPITALS_NEARBY, {\n        params: {\n          lat: params.latitude,\n          lng: params.longitude,\n          radius: params.radius || 5000,\n          limit: params.limit || 20,\n          departments: (_params$departments = params.departments) === null || _params$departments === void 0 ? void 0 : _params$departments.join(','),\n          emergency_only: params.emergency_only || false\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('[Hospital Search API Error]', error);\n      throw error;\n    }\n  },\n  /**\r\n   * 取得緊急醫療資訊\r\n   */\n  async getEmergencyInfo() {\n    try {\n      const response = await api.get(API_ENDPOINTS.HOSPITALS_EMERGENCY);\n      return response.data;\n    } catch (error) {\n      console.error('[Emergency Info API Error]', error);\n      throw error;\n    }\n  }\n};\n\n/**\r\n * 地理位置服務\r\n */\nexport const locationApi = {\n  /**\r\n   * 取得使用者目前位置\r\n   */\n  async getCurrentLocation() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('此瀏覽器不支援地理定位功能'));\n        return;\n      }\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000 // 1分鐘內的快取位置可接受\n      };\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        let message = '無法取得位置資訊';\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            message = '使用者拒絕了地理定位請求';\n            break;\n          case error.POSITION_UNAVAILABLE:\n            message = '位置資訊不可用';\n            break;\n          case error.TIMEOUT:\n            message = '定位請求超時';\n            break;\n        }\n        reject(new Error(message));\n      }, options);\n    });\n  },\n  /**\r\n   * 計算兩點間距離（公里）\r\n   */\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // 地球半徑（公里）\n    const dLat = this.degToRad(lat2 - lat1);\n    const dLon = this.degToRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.degToRad(lat1)) * Math.cos(this.degToRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  },\n  degToRad(deg) {\n    return deg * (Math.PI / 180);\n  }\n};\n\n/**\r\n * 緊急撥號服務\r\n */\nexport const emergencyApi = {\n  /**\r\n   * 撥打緊急電話\r\n   * 注意：在網頁環境中，只能開啟撥號程式，無法直接撥號\r\n   */\n  call(number) {\n    try {\n      // 檢查是否為行動裝置\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      if (isMobile) {\n        // 行動裝置直接撥號\n        window.location.href = `tel:${number}`;\n      } else {\n        // 桌面裝置顯示電話號碼\n        alert(`請撥打：${number}\\n\\n如果您在緊急狀況中，請使用手機撥打此號碼。`);\n      }\n    } catch (error) {\n      console.error('[Emergency Call Error]', error);\n      alert(`緊急電話：${number}\\n請立即使用電話撥打此號碼。`);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_ENDPOINTS","API_CONFIG","api","create","baseURL","BASE_URL","timeout","TIMEOUT","headers","interceptors","request","use","config","_config$method","requestId","Date","now","Math","random","toString","substr","toISOString","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","_error$response2$data","_error$config","message","errorMessage","getErrorMessage","_error$response3","_error$response3$data","_error$response4","code","includes","triageApi","quickTriage","post","TRIAGE_QUICK","hospitalApi","searchNearby","params","_params$departments","get","HOSPITALS_NEARBY","lat","latitude","lng","longitude","radius","limit","departments","join","emergency_only","getEmergencyInfo","HOSPITALS_EMERGENCY","locationApi","getCurrentLocation","resolve","navigator","geolocation","Error","options","enableHighAccuracy","maximumAge","getCurrentPosition","position","coords","PERMISSION_DENIED","POSITION_UNAVAILABLE","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","degToRad","dLon","a","sin","cos","c","atan2","sqrt","deg","PI","emergencyApi","call","number","isMobile","test","userAgent","window","location","href","alert"],"sources":["C:/Users/thc1006/Desktop/dev/NYCU-Med-AI-Agent/frontend/src/services/api.ts"],"sourcesContent":["/**\r\n * API 服務層 - 與後端 FastAPI 通訊\r\n */\r\n\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  TriageRequest,\r\n  TriageResponse,\r\n  Hospital,\r\n  EmergencyInfo,\r\n  API_ENDPOINTS\r\n} from '../types';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\n// 建立 axios 實例\r\nconst api = axios.create({\r\n  baseURL: API_CONFIG.BASE_URL,\r\n  timeout: API_CONFIG.TIMEOUT,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'Accept-Language': 'zh-TW'\r\n  }\r\n});\r\n\r\n// 請求攔截器 - 加入請求 ID 和時間戳\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    config.headers['X-Request-ID'] = requestId;\r\n    config.headers['X-Client-Timestamp'] = new Date().toISOString();\r\n\r\n    console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`, {\r\n      requestId,\r\n      data: config.data\r\n    });\r\n\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 回應攔截器 - 統一錯誤處理\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    console.log(`[API Response] ${response.status}`, {\r\n      requestId: response.headers['x-request-id'],\r\n      data: response.data\r\n    });\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('[API Response Error]', {\r\n      status: error.response?.status,\r\n      message: error.response?.data?.message || error.message,\r\n      url: error.config?.url\r\n    });\r\n\r\n    // 轉換錯誤訊息為繁體中文\r\n    const errorMessage = getErrorMessage(error);\r\n    error.message = errorMessage;\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * 將錯誤訊息轉換為使用者友善的繁體中文訊息\r\n */\r\nfunction getErrorMessage(error: any): string {\r\n  if (error.response?.data?.message) {\r\n    return error.response.data.message;\r\n  }\r\n\r\n  switch (error.response?.status) {\r\n    case 400:\r\n      return '請求參數有誤，請檢查輸入資料';\r\n    case 401:\r\n      return '未授權存取，請重新登入';\r\n    case 403:\r\n      return '沒有權限執行此操作';\r\n    case 404:\r\n      return '找不到相關資源';\r\n    case 429:\r\n      return '請求過於頻繁，請稍後再試';\r\n    case 500:\r\n      return '伺服器發生錯誤，請稍後再試';\r\n    case 502:\r\n    case 503:\r\n    case 504:\r\n      return '服務暫時無法使用，請稍後再試';\r\n    default:\r\n      if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\r\n        return '網路連線異常，請檢查網路設定';\r\n      }\r\n      if (error.code === 'ECONNABORTED') {\r\n        return '請求超時，請重試';\r\n      }\r\n      return '系統發生未知錯誤，請聯絡技術支援';\r\n  }\r\n}\r\n\r\n/**\r\n * 症狀分級評估 API\r\n */\r\nexport const triageApi = {\r\n  /**\r\n   * 快速症狀評估\r\n   */\r\n  async quickTriage(request: TriageRequest): Promise<TriageResponse> {\r\n    try {\r\n      const response = await api.post<TriageResponse>(\r\n        API_ENDPOINTS.TRIAGE_QUICK,\r\n        request\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[Triage API Error]', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 醫院搜尋 API\r\n */\r\nexport const hospitalApi = {\r\n  /**\r\n   * 搜尋附近醫院\r\n   */\r\n  async searchNearby(params: {\r\n    latitude: number;\r\n    longitude: number;\r\n    radius?: number;\r\n    limit?: number;\r\n    departments?: string[];\r\n    emergency_only?: boolean;\r\n  }): Promise<Hospital[]> {\r\n    try {\r\n      const response = await api.get<Hospital[]>(API_ENDPOINTS.HOSPITALS_NEARBY, {\r\n        params: {\r\n          lat: params.latitude,\r\n          lng: params.longitude,\r\n          radius: params.radius || 5000,\r\n          limit: params.limit || 20,\r\n          departments: params.departments?.join(','),\r\n          emergency_only: params.emergency_only || false\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[Hospital Search API Error]', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 取得緊急醫療資訊\r\n   */\r\n  async getEmergencyInfo(): Promise<EmergencyInfo> {\r\n    try {\r\n      const response = await api.get<EmergencyInfo>(API_ENDPOINTS.HOSPITALS_EMERGENCY);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('[Emergency Info API Error]', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 地理位置服務\r\n */\r\nexport const locationApi = {\r\n  /**\r\n   * 取得使用者目前位置\r\n   */\r\n  async getCurrentLocation(): Promise<{ latitude: number; longitude: number }> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('此瀏覽器不支援地理定位功能'));\r\n        return;\r\n      }\r\n\r\n      const options: PositionOptions = {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000 // 1分鐘內的快取位置可接受\r\n      };\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          });\r\n        },\r\n        (error) => {\r\n          let message = '無法取得位置資訊';\r\n\r\n          switch (error.code) {\r\n            case error.PERMISSION_DENIED:\r\n              message = '使用者拒絕了地理定位請求';\r\n              break;\r\n            case error.POSITION_UNAVAILABLE:\r\n              message = '位置資訊不可用';\r\n              break;\r\n            case error.TIMEOUT:\r\n              message = '定位請求超時';\r\n              break;\r\n          }\r\n\r\n          reject(new Error(message));\r\n        },\r\n        options\r\n      );\r\n    });\r\n  },\r\n\r\n  /**\r\n   * 計算兩點間距離（公里）\r\n   */\r\n  calculateDistance(\r\n    lat1: number,\r\n    lon1: number,\r\n    lat2: number,\r\n    lon2: number\r\n  ): number {\r\n    const R = 6371; // 地球半徑（公里）\r\n    const dLat = this.degToRad(lat2 - lat1);\r\n    const dLon = this.degToRad(lon2 - lon1);\r\n\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.degToRad(lat1)) * Math.cos(this.degToRad(lat2)) *\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  },\r\n\r\n  degToRad(deg: number): number {\r\n    return deg * (Math.PI / 180);\r\n  }\r\n};\r\n\r\n/**\r\n * 緊急撥號服務\r\n */\r\nexport const emergencyApi = {\r\n  /**\r\n   * 撥打緊急電話\r\n   * 注意：在網頁環境中，只能開啟撥號程式，無法直接撥號\r\n   */\r\n  call(number: string): void {\r\n    try {\r\n      // 檢查是否為行動裝置\r\n      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n        navigator.userAgent\r\n      );\r\n\r\n      if (isMobile) {\r\n        // 行動裝置直接撥號\r\n        window.location.href = `tel:${number}`;\r\n      } else {\r\n        // 桌面裝置顯示電話號碼\r\n        alert(`請撥打：${number}\\n\\n如果您在緊急狀況中，請使用手機撥打此號碼。`);\r\n      }\r\n    } catch (error) {\r\n      console.error('[Emergency Call Error]', error);\r\n      alert(`緊急電話：${number}\\n請立即使用電話撥打此號碼。`);\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}